import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

import '../Models/project_model.dart';

class FirebaseProjectServices {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  // Collection reference
  CollectionReference get projectRef => _firestore.collection('projects');

  // Get current user ID
  String? get currentUserId => _auth.currentUser?.uid;

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ä‡πâ Asset Icons)
  Future<String> createProject({
    required String title,
    required String iconKey,
    String? description,
  }) async {
    try {
      print('üîÑ Creating project...');
      print('üìç User ID: $currentUserId');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (currentUserId == null) {
        throw Exception('User not authenticated');
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á ProjectModel
      final project = ProjectModel.create(
        title: title,
        iconKey: iconKey,
        userId: currentUserId!,
        description: description,
      );

      print('üìã Project data: ${project.toMap()}');

      // Validate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      if (!project.isValid) {
        throw Exception('Invalid project data');
      }

      final titleError = project.validateTitle();
      if (titleError != null) {
        throw Exception(titleError);
      }

      final descriptionError = project.validateDescription();
      if (descriptionError != null) {
        throw Exception(descriptionError);
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Firestore
      final docRef = await projectRef.add(project.toMap());

      print('‚úÖ Project created successfully with ID: ${docRef.id}');
      return docRef.id;
    } catch (e) {
      print('‚ùå Failed to create project: $e');
      rethrow;
    }
  }

  /// ‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (Real-time)
  Stream<List<ProjectModel>> getUserProjects() {
    try {
      print('üîÑ Getting user projects...');
      print('üìç User ID: $currentUserId');

      if (currentUserId == null) {
        print('‚ö†Ô∏è No user logged in, returning empty stream');
        return Stream.value([]);
      }

      return projectRef
          .where('userId', isEqualTo: currentUserId)
          .orderBy('createdAt', descending: true)
          .snapshots()
          .map((snapshot) {
            print(
              'üì¶ Received ${snapshot.docs.length} projects from Firestore',
            );

            final projects =
                snapshot.docs
                    .map((doc) {
                      try {
                        final data = doc.data() as Map<String, dynamic>;
                        print('üìÑ Project data: $data');

                        return ProjectModel.fromMap(data, doc.id);
                      } catch (e) {
                        print('‚ùå Error parsing project ${doc.id}: $e');
                        return null;
                      }
                    })
                    .where((project) => project != null)
                    .cast<ProjectModel>()
                    .toList();

            print('‚úÖ Successfully parsed ${projects.length} projects');
            return projects;
          })
          .handleError((error) {
            print('‚ùå Stream error: $error');
            throw error;
          });
    } catch (e) {
      print('‚ùå Failed to get user projects: $e');
      return Stream.error(e);
    }
  }

  /// ‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (One-time) - ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ orderBy
  Future<List<ProjectModel>> getUserProjectsOnceSimple() async {
    try {
      print('üîÑ Getting user projects (simple)...');
      print('üìç User ID: $currentUserId');

      if (currentUserId == null) {
        print('‚ö†Ô∏è No user logged in, returning empty list');
        return [];
      }

      final snapshot =
          await projectRef.where('userId', isEqualTo: currentUserId).get();

      print('üì¶ Received ${snapshot.docs.length} projects from Firestore');

      final projects =
          snapshot.docs
              .map((doc) {
                try {
                  final data = doc.data() as Map<String, dynamic>;
                  print('üìÑ Project data: $data');

                  return ProjectModel.fromMap(data, doc.id);
                } catch (e) {
                  print('‚ùå Error parsing project ${doc.id}: $e');
                  return null;
                }
              })
              .where((project) => project != null)
              .cast<ProjectModel>()
              .toList();

      print('‚úÖ Successfully parsed ${projects.length} projects');
      return projects;
    } catch (e) {
      print('‚ùå Failed to get user projects: $e');
      rethrow;
    }
  }

  /// Stream ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡πÑ‡∏°‡πà‡∏°‡∏µ orderBy
  Stream<List<ProjectModel>> getUserProjectsSimple() {
    try {
      print('üîÑ Getting user projects (simple stream)...');
      print('üìç User ID: $currentUserId');

      if (currentUserId == null) {
        print('‚ö†Ô∏è No user logged in, returning empty stream');
        return Stream.value([]);
      }

      return projectRef
          .where('userId', isEqualTo: currentUserId)
          .snapshots()
          .map((snapshot) {
            print(
              'üì¶ Received ${snapshot.docs.length} projects from Firestore',
            );

            final projects =
                snapshot.docs
                    .map((doc) {
                      try {
                        final data = doc.data() as Map<String, dynamic>;
                        print('üìÑ Project data: $data');

                        return ProjectModel.fromMap(data, doc.id);
                      } catch (e) {
                        print('‚ùå Error parsing project ${doc.id}: $e');
                        return null;
                      }
                    })
                    .where((project) => project != null)
                    .cast<ProjectModel>()
                    .toList();

            print('‚úÖ Successfully parsed ${projects.length} projects');
            return projects;
          })
          .handleError((error) {
            print('‚ùå Stream error: $error');
            throw error;
          });
    } catch (e) {
      print('‚ùå Failed to get user projects: $e');
      return Stream.error(e);
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  Future<bool> checkConnection() async {
    try {
      print('üîÑ Checking Firestore connection...');

      // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 1 document ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
      await _firestore.collection('test').limit(1).get();

      print('‚úÖ Firestore connection OK');
      return true;
    } catch (e) {
      print('‚ùå Firestore connection failed: $e');
      return false;
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ user
  void checkUserStatus() {
    final user = _auth.currentUser;
    print('üë§ Current user: ${user?.uid}');
    print('üìß User email: ${user?.email}');
    print('üì± User name: ${user?.displayName}');
    print('üîê User signed in: ${user != null}');
  }

  Future<void> deleteProject(String projectId) async {
    try {
      print('Deleting your project $projectId');
      await projectRef.doc(projectId).delete();
      print('‚úÖ Project deleted successfully');
    } catch (e) {
      print('‚ùå Failed to delete project: $e');
      rethrow;
    }
  }

  Future<void> editProject(
    String title,
    String iconKey,
    String projectId,
  ) async {
    try {
      print('üîÑ Editing project...');
      print('üìç Project ID: $projectId');
      print('üìç User ID: $currentUserId');
      if (currentUserId == null) {
        throw Exception('User not authenticated');
      }
      final tempProject = ProjectModel.create(
        title: title,
        iconKey: iconKey,
        userId: currentUserId!,
      );
      final titleError = tempProject.validateTitle();
      if (titleError != null) {
        throw Exception(titleError);
      }
      final updateData = {
        'title': title,
        'iconKey': iconKey,
        'updatedAt': FieldValue.serverTimestamp(),
      };
      await projectRef.doc(projectId).update(updateData);
      print('‚úÖ Project update successfully');
    } catch (e) {
      print('‚ùå Failed to update project: $e');
      rethrow;
    }
  }
}
