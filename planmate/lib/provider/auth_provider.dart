import 'dart:async';
import 'package:flutter/foundation.dart'
    show ChangeNotifier, debugPrint, kIsWeb;
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:google_sign_in/google_sign_in.dart';

class AuthProvider extends ChangeNotifier {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final GoogleSignIn _googleSignIn = GoogleSignIn();

  User? _currentUser;
  bool _isLoading = false;
  String? _error;

  StreamSubscription<User?>? _authSub;

  // Getters
  User? get currentUser => _currentUser;
  bool get isLoading => _isLoading;
  String? get error => _error;
  bool get isAuthenticated => _currentUser != null;

  AuthProvider() {
    _initialize();
  }

  void _initialize() {
    debugPrint('üîÑ AuthProvider: Initializing...');
    _currentUser = _auth.currentUser;
    debugPrint('üìç Initial user: ${_currentUser?.uid}');

    // ‚úÖ ‡πÉ‡∏ä‡πâ idTokenChanges ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏Å‡∏ß‡πà‡∏≤ authStateChanges
    _authSub = _auth.idTokenChanges().listen((user) {
      debugPrint('üîî Auth token/state changed: ${user?.uid}');
      if (_currentUser?.uid != user?.uid) {
        _currentUser = user;
        notifyListeners();
      }
    });
  }

  @override
  void dispose() {
    _authSub?.cancel();
    super.dispose();
  }

  void clearError() {
    if (_error != null) {
      _error = null;
      notifyListeners();
    }
  }

  void _setLoading(bool loading) {
    if (_isLoading != loading) {
      _isLoading = loading;
      notifyListeners();
    }
  }

  void _setError(String? error) {
    _error = error;
    notifyListeners();
  }

  Future<bool> signInWithGoogle() async {
    _setLoading(true);
    clearError();
    try {
      debugPrint('üîÑ Starting Google Sign In...');

      if (kIsWeb) {
        final provider =
            GoogleAuthProvider()
              ..addScope('email')
              ..addScope('profile');

        final cred = await _auth.signInWithPopup(provider);
        debugPrint(
          '‚úÖ Firebase sign in (web) successful: ${cred.user?.uid}',
        );
        if (cred.user != null) {
          await _saveUserToFirestore(cred.user!);
        }

        // ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï + ‡πÅ‡∏à‡πâ‡∏á UI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        _currentUser = _auth.currentUser;
        _setLoading(false);
        notifyListeners();
        return true;
      } else {
        // Android/iOS
        final GoogleSignInAccount? googleAcc =
            await _googleSignIn.signIn();
        if (googleAcc == null) {
          debugPrint('‚ö†Ô∏è User cancelled Google Sign In');
          _setLoading(false);
          return false;
        }

        debugPrint('‚úÖ Google account selected: ${googleAcc.email}');
        final GoogleSignInAuthentication authData =
            await googleAcc.authentication;

        final credential = GoogleAuthProvider.credential(
          accessToken: authData.accessToken,
          idToken: authData.idToken,
        );

        debugPrint('üîÑ Signing in to Firebase...');
        final userCred = await _auth.signInWithCredential(credential);
        debugPrint('‚úÖ Firebase sign in successful: ${userCred.user?.uid}');

        if (userCred.user != null) {
          await _saveUserToFirestore(userCred.user!);
        }

        // ‚úÖ ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state + notify ‡πÉ‡∏´‡πâ AuthWrapper ‡∏£‡∏µ‡∏ö‡∏¥‡∏•‡∏î‡πå‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Home
        _currentUser = _auth.currentUser;
        debugPrint(
          '‚úÖ Firebase currentUser after signIn: ${_currentUser?.uid}',
        );
        _setLoading(false);
        notifyListeners();
        return true;
      }
    } on FirebaseAuthException catch (e) {
      debugPrint('‚ùå Firebase Auth Error: ${e.code} - ${e.message}');
      _setLoading(false);
      _setError(_mapFirebaseAuthError(e));
      return false;
    } on Exception catch (e) {
      final msg = e.toString();
      debugPrint('‚ùå Google Sign-In Error: $msg');
      _setLoading(false);

      if (msg.contains('com.google.android.gms') ||
          msg.contains('Google Play services') ||
          msg.contains('Unknown calling package name')) {
        _setError(
          '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ/‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° Google Play services.\n'
          '‡πÉ‡∏ä‡πâ Emulator ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Google Play image ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Google Play services\n'
          '‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° SHA-1 debug keystore ‡πÉ‡∏ô Firebase Console ‡πÅ‡∏•‡πâ‡∏ß',
        );
      } else {
        _setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö: $msg');
      }
      return false;
    }
  }

  Future<void> signOut() async {
    try {
      debugPrint('üîÑ Signing out...');
      _setLoading(true);
      clearError();

      if (!kIsWeb) {
        try {
          await _googleSignIn.disconnect();
        } catch (_) {}
        await _googleSignIn.signOut();
      }
      await _auth.signOut();

      _currentUser = null;
      _setLoading(false);
      notifyListeners();
      debugPrint('‚úÖ Sign out successful');
    } catch (e) {
      debugPrint('‚ùå Sign out error: $e');
      _setLoading(false);
      _setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö: $e');
    }
  }

  Future<void> _saveUserToFirestore(User user) async {
    try {
      debugPrint('üîÑ Saving user to Firestore: ${user.uid}');
      final userDoc = _firestore.collection('users').doc(user.uid);
      final snap = await userDoc.get();

      if (!snap.exists) {
        debugPrint('üìù Creating new user document');
        await userDoc.set({
          'uid': user.uid,
          'name': user.displayName ?? '',
          'email': user.email ?? '',
          'photoURL': user.photoURL ?? '',
          'createdAt': FieldValue.serverTimestamp(),
          'lastSignIn': FieldValue.serverTimestamp(),
        });
      } else {
        debugPrint('üìù Updating last sign in time');
        await userDoc.update({'lastSignIn': FieldValue.serverTimestamp()});
      }
      debugPrint('‚úÖ User document saved/updated');
    } catch (e) {
      debugPrint('‚ùå Error saving user to Firestore: $e');
    }
  }

  String _mapFirebaseAuthError(FirebaseAuthException e) {
    switch (e.code) {
      case 'account-exists-with-different-credential':
        return '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô';
      case 'invalid-credential':
        return '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
      case 'operation-not-allowed':
        return '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Google ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï';
      case 'user-disabled':
        return '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
      case 'user-not-found':
        return '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ';
      case 'wrong-password':
        return '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
      case 'network-request-failed':
        return '‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢';
      case 'popup-closed-by-user':
        return '‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô';
      default:
        return '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message ?? e.code}';
    }
  }

  String get displayName => _currentUser?.displayName ?? 'User';
  String get email => _currentUser?.email ?? '';
  String? get photoURL => _currentUser?.photoURL;
  String? get userId => _currentUser?.uid;

  void printAuthState() {
    debugPrint('========== AUTH STATE ==========');
    debugPrint('Is Authenticated: $isAuthenticated');
    debugPrint('User ID: $userId');
    debugPrint('Email: $email');
    debugPrint('Display Name: $displayName');
    debugPrint('Is Loading: $isLoading');
    debugPrint('Error: $error');
    debugPrint('================================');
  }
}
